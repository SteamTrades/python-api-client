# coding: utf-8

"""
    SteamTrades API

    API Explorer for SteamTrades' RESTful API.

    OpenAPI spec version: 1.0
    Contact: devs@steamtrad.es
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class TradeApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def game_get(self, **kwargs):
        """
        List supported games
        Obtains a list of all supported games.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.game_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Game]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.game_get_with_http_info(**kwargs)
        else:
            (data) = self.game_get_with_http_info(**kwargs)
            return data

    def game_get_with_http_info(self, **kwargs):
        """
        List supported games
        Obtains a list of all supported games.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.game_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Game]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/game/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Token']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Game]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def game_id_get(self, id, **kwargs):
        """
        Info about a game
        Obtains information about a single supported game.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.game_id_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Game ID (e.g. 730 for CS:GO). (required)
        :return: Game
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.game_id_get_with_http_info(id, **kwargs)
        else:
            (data) = self.game_id_get_with_http_info(id, **kwargs)
            return data

    def game_id_get_with_http_info(self, id, **kwargs):
        """
        Info about a game
        Obtains information about a single supported game.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.game_id_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Game ID (e.g. 730 for CS:GO). (required)
        :return: Game
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `game_id_get`")


        collection_formats = {}

        resource_path = '/game/{id}/'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Token']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Game',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def item_mine_get(self, **kwargs):
        """
        List owned items
        Queries the list of items owned by you.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.item_mine_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str context_id: Inventory context ID for filtering.
        :param int offset: Offset to start listing
        :param int limit: Number of trades to retrieve
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.item_mine_get_with_http_info(**kwargs)
        else:
            (data) = self.item_mine_get_with_http_info(**kwargs)
            return data

    def item_mine_get_with_http_info(self, **kwargs):
        """
        List owned items
        Queries the list of items owned by you.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.item_mine_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str context_id: Inventory context ID for filtering.
        :param int offset: Offset to start listing
        :param int limit: Number of trades to retrieve
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['context_id', 'offset', 'limit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method item_mine_get" % key
                )
            params[key] = val
        del params['kwargs']

        if 'limit' in params and params['limit'] > 1000:
            raise ValueError("Invalid value for parameter `limit` when calling `item_mine_get`, must be a value less than or equal to `1000`")

        collection_formats = {}

        resource_path = '/item/mine/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'context_id' in params:
            query_params['context_id'] = params['context_id']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Token']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse200',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def item_scan_user_inventory_post(self, trade_url, context_id, **kwargs):
        """
        Scan Steam user inventory
        Queries information about the inventory scan state of a Steam user. If no scan is in progress and if there are no previous scans or all previous scans are invalid, a new scan is queued. Scans are considered invalid if they are outdated, if `force_refresh` was passed or is they simply do not exist, yet. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.item_scan_user_inventory_post(trade_url, context_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str trade_url: Trade URL of the target user. (required)
        :param str context_id: Inventory context ID to retrieve items for. (required)
        :param bool force_refresh: Do not use cached info (if exists), force rescan.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.item_scan_user_inventory_post_with_http_info(trade_url, context_id, **kwargs)
        else:
            (data) = self.item_scan_user_inventory_post_with_http_info(trade_url, context_id, **kwargs)
            return data

    def item_scan_user_inventory_post_with_http_info(self, trade_url, context_id, **kwargs):
        """
        Scan Steam user inventory
        Queries information about the inventory scan state of a Steam user. If no scan is in progress and if there are no previous scans or all previous scans are invalid, a new scan is queued. Scans are considered invalid if they are outdated, if `force_refresh` was passed or is they simply do not exist, yet. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.item_scan_user_inventory_post_with_http_info(trade_url, context_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str trade_url: Trade URL of the target user. (required)
        :param str context_id: Inventory context ID to retrieve items for. (required)
        :param bool force_refresh: Do not use cached info (if exists), force rescan.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['trade_url', 'context_id', 'force_refresh']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method item_scan_user_inventory_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'trade_url' is set
        if ('trade_url' not in params) or (params['trade_url'] is None):
            raise ValueError("Missing the required parameter `trade_url` when calling `item_scan_user_inventory_post`")
        # verify the required parameter 'context_id' is set
        if ('context_id' not in params) or (params['context_id'] is None):
            raise ValueError("Missing the required parameter `context_id` when calling `item_scan_user_inventory_post`")


        collection_formats = {}

        resource_path = '/item/scan_user_inventory/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'trade_url' in params:
            query_params['trade_url'] = params['trade_url']
        if 'context_id' in params:
            query_params['context_id'] = params['context_id']
        if 'force_refresh' in params:
            query_params['force_refresh'] = params['force_refresh']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Token']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2001',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def item_user_inventory_get(self, trade_url, context_id, **kwargs):
        """
        Get inventory scan results
        Queries the cached list of items owned by a Steam user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.item_user_inventory_get(trade_url, context_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str trade_url: Trade URL of the target user. (required)
        :param str context_id: Inventory context ID to retrieve items for. (required)
        :return: list[ScannedItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.item_user_inventory_get_with_http_info(trade_url, context_id, **kwargs)
        else:
            (data) = self.item_user_inventory_get_with_http_info(trade_url, context_id, **kwargs)
            return data

    def item_user_inventory_get_with_http_info(self, trade_url, context_id, **kwargs):
        """
        Get inventory scan results
        Queries the cached list of items owned by a Steam user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.item_user_inventory_get_with_http_info(trade_url, context_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str trade_url: Trade URL of the target user. (required)
        :param str context_id: Inventory context ID to retrieve items for. (required)
        :return: list[ScannedItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['trade_url', 'context_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method item_user_inventory_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'trade_url' is set
        if ('trade_url' not in params) or (params['trade_url'] is None):
            raise ValueError("Missing the required parameter `trade_url` when calling `item_user_inventory_get`")
        # verify the required parameter 'context_id' is set
        if ('context_id' not in params) or (params['context_id'] is None):
            raise ValueError("Missing the required parameter `context_id` when calling `item_user_inventory_get`")


        collection_formats = {}

        resource_path = '/item/user_inventory/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'trade_url' in params:
            query_params['trade_url'] = params['trade_url']
        if 'context_id' in params:
            query_params['context_id'] = params['context_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Token']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ScannedItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def trade_get(self, **kwargs):
        """
        List your trades
        Queries a list of your trades, oldest trades first.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.trade_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] filter_ids: If passed, returns only trades with given IDs
        :param int offset: Offset to start listing
        :param int limit: Number of trades to retrieve
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.trade_get_with_http_info(**kwargs)
        else:
            (data) = self.trade_get_with_http_info(**kwargs)
            return data

    def trade_get_with_http_info(self, **kwargs):
        """
        List your trades
        Queries a list of your trades, oldest trades first.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.trade_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] filter_ids: If passed, returns only trades with given IDs
        :param int offset: Offset to start listing
        :param int limit: Number of trades to retrieve
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter_ids', 'offset', 'limit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trade_get" % key
                )
            params[key] = val
        del params['kwargs']

        if 'limit' in params and params['limit'] > 1000:
            raise ValueError("Invalid value for parameter `limit` when calling `trade_get`, must be a value less than or equal to `1000`")

        collection_formats = {}

        resource_path = '/trade/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'filter_ids' in params:
            query_params['filter_ids'] = params['filter_ids']
            collection_formats['filter_ids'] = 'csv'
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Token']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2002',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def trade_id_get(self, id, **kwargs):
        """
        Get trade status
        Queries the status of a previously initiated trade.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.trade_id_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Trade ID to query information for. (required)
        :return: Trade
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.trade_id_get_with_http_info(id, **kwargs)
        else:
            (data) = self.trade_id_get_with_http_info(id, **kwargs)
            return data

    def trade_id_get_with_http_info(self, id, **kwargs):
        """
        Get trade status
        Queries the status of a previously initiated trade.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.trade_id_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Trade ID to query information for. (required)
        :return: Trade
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trade_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `trade_id_get`")


        collection_formats = {}

        resource_path = '/trade/{id}/'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Token']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Trade',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def trade_request_items_post(self, trade_url, context_id, asset_ids, **kwargs):
        """
        Request items
        Sends a trade offer to a Steam user requesting items.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.trade_request_items_post(trade_url, context_id, asset_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str trade_url: Trade URL of the user to request items from. (required)
        :param str context_id: The context ID the asset IDs belong to. (required)
        :param list[str] asset_ids: Steam asset IDs of the items to request, separated by commas.  (required)
        :param str message: Message sent with this trade. You may use `{verify_url}` to define where the trade verification URL is inserted. If `{verify_url}` isn't used, the URL is just appended. You message is limited to 65 characters (excluding URL). 
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.trade_request_items_post_with_http_info(trade_url, context_id, asset_ids, **kwargs)
        else:
            (data) = self.trade_request_items_post_with_http_info(trade_url, context_id, asset_ids, **kwargs)
            return data

    def trade_request_items_post_with_http_info(self, trade_url, context_id, asset_ids, **kwargs):
        """
        Request items
        Sends a trade offer to a Steam user requesting items.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.trade_request_items_post_with_http_info(trade_url, context_id, asset_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str trade_url: Trade URL of the user to request items from. (required)
        :param str context_id: The context ID the asset IDs belong to. (required)
        :param list[str] asset_ids: Steam asset IDs of the items to request, separated by commas.  (required)
        :param str message: Message sent with this trade. You may use `{verify_url}` to define where the trade verification URL is inserted. If `{verify_url}` isn't used, the URL is just appended. You message is limited to 65 characters (excluding URL). 
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['trade_url', 'context_id', 'asset_ids', 'message']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trade_request_items_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'trade_url' is set
        if ('trade_url' not in params) or (params['trade_url'] is None):
            raise ValueError("Missing the required parameter `trade_url` when calling `trade_request_items_post`")
        # verify the required parameter 'context_id' is set
        if ('context_id' not in params) or (params['context_id'] is None):
            raise ValueError("Missing the required parameter `context_id` when calling `trade_request_items_post`")
        # verify the required parameter 'asset_ids' is set
        if ('asset_ids' not in params) or (params['asset_ids'] is None):
            raise ValueError("Missing the required parameter `asset_ids` when calling `trade_request_items_post`")


        collection_formats = {}

        resource_path = '/trade/request_items/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'trade_url' in params:
            query_params['trade_url'] = params['trade_url']
        if 'context_id' in params:
            query_params['context_id'] = params['context_id']
        if 'asset_ids' in params:
            query_params['asset_ids'] = params['asset_ids']
            collection_formats['asset_ids'] = 'csv'
        if 'message' in params:
            query_params['message'] = params['message']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Token']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2003',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def trade_send_items_post(self, trade_url, items, **kwargs):
        """
        Send items
        Sends a trade offer to a Steam user offering a list of your items.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.trade_send_items_post(trade_url, items, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str trade_url: Trade URL of the user to send items to. (required)
        :param list[str] items: IDs of the items to send, separated by commas.  (required)
        :param str message: Message sent with this trade. You may use `{verify_url}` to define where the trade verification URL is inserted. If `{verify_url}` isn't used, the URL is just appended. You message is limited to 65 characters (excluding URL). 
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.trade_send_items_post_with_http_info(trade_url, items, **kwargs)
        else:
            (data) = self.trade_send_items_post_with_http_info(trade_url, items, **kwargs)
            return data

    def trade_send_items_post_with_http_info(self, trade_url, items, **kwargs):
        """
        Send items
        Sends a trade offer to a Steam user offering a list of your items.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.trade_send_items_post_with_http_info(trade_url, items, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str trade_url: Trade URL of the user to send items to. (required)
        :param list[str] items: IDs of the items to send, separated by commas.  (required)
        :param str message: Message sent with this trade. You may use `{verify_url}` to define where the trade verification URL is inserted. If `{verify_url}` isn't used, the URL is just appended. You message is limited to 65 characters (excluding URL). 
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['trade_url', 'items', 'message']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trade_send_items_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'trade_url' is set
        if ('trade_url' not in params) or (params['trade_url'] is None):
            raise ValueError("Missing the required parameter `trade_url` when calling `trade_send_items_post`")
        # verify the required parameter 'items' is set
        if ('items' not in params) or (params['items'] is None):
            raise ValueError("Missing the required parameter `items` when calling `trade_send_items_post`")


        collection_formats = {}

        resource_path = '/trade/send_items/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'trade_url' in params:
            query_params['trade_url'] = params['trade_url']
        if 'items' in params:
            query_params['items'] = params['items']
            collection_formats['items'] = 'csv'
        if 'message' in params:
            query_params['message'] = params['message']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Token']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2005',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def trade_transfer_items_post(self, items, dst_app_id, **kwargs):
        """
        Transfer items
        Transfers items from this app to another (SteamTrades internal transfer). Other than trades with Steam users, these \"trades\" are performed instantly and no actual trade object is created unless when you using `move_physically`, which, when required, creates a regular trade. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.trade_transfer_items_post(items, dst_app_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] items: IDs of the items to transfer, separated by commas.  (required)
        :param int dst_app_id: ID of the app receiving the items. (required)
        :param bool allow_foreign_dst: Whether to allow transfer to apps of other users.
        :param bool move_physically: Whether to physically move the item to bots of the destination app (in case either the source or destination app, or both, have dedicated bots). Items are only moved phisically if this is required because source and destination app have different storage locations. All items that are in the physical trade (and thus not moved instantly) are listed in `items_in_trade`. 
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.trade_transfer_items_post_with_http_info(items, dst_app_id, **kwargs)
        else:
            (data) = self.trade_transfer_items_post_with_http_info(items, dst_app_id, **kwargs)
            return data

    def trade_transfer_items_post_with_http_info(self, items, dst_app_id, **kwargs):
        """
        Transfer items
        Transfers items from this app to another (SteamTrades internal transfer). Other than trades with Steam users, these \"trades\" are performed instantly and no actual trade object is created unless when you using `move_physically`, which, when required, creates a regular trade. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.trade_transfer_items_post_with_http_info(items, dst_app_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] items: IDs of the items to transfer, separated by commas.  (required)
        :param int dst_app_id: ID of the app receiving the items. (required)
        :param bool allow_foreign_dst: Whether to allow transfer to apps of other users.
        :param bool move_physically: Whether to physically move the item to bots of the destination app (in case either the source or destination app, or both, have dedicated bots). Items are only moved phisically if this is required because source and destination app have different storage locations. All items that are in the physical trade (and thus not moved instantly) are listed in `items_in_trade`. 
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['items', 'dst_app_id', 'allow_foreign_dst', 'move_physically']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trade_transfer_items_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'items' is set
        if ('items' not in params) or (params['items'] is None):
            raise ValueError("Missing the required parameter `items` when calling `trade_transfer_items_post`")
        # verify the required parameter 'dst_app_id' is set
        if ('dst_app_id' not in params) or (params['dst_app_id'] is None):
            raise ValueError("Missing the required parameter `dst_app_id` when calling `trade_transfer_items_post`")


        collection_formats = {}

        resource_path = '/trade/transfer_items/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'items' in params:
            query_params['items'] = params['items']
            collection_formats['items'] = 'csv'
        if 'dst_app_id' in params:
            query_params['dst_app_id'] = params['dst_app_id']
        if 'allow_foreign_dst' in params:
            query_params['allow_foreign_dst'] = params['allow_foreign_dst']
        if 'move_physically' in params:
            query_params['move_physically'] = params['move_physically']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Token']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2004',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_info_by_steam_id_get(self, steam_id, **kwargs):
        """
        Steam user info by Steam ID
        Queries information about a Steam user, by its Steam ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_info_by_steam_id_get(steam_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str steam_id: Steam ID (64-bit) of the target user. (required)
        :param bool force_refresh: Don't use cached results, force refresh. Defaults to `false`.
        :return: UserInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_info_by_steam_id_get_with_http_info(steam_id, **kwargs)
        else:
            (data) = self.user_info_by_steam_id_get_with_http_info(steam_id, **kwargs)
            return data

    def user_info_by_steam_id_get_with_http_info(self, steam_id, **kwargs):
        """
        Steam user info by Steam ID
        Queries information about a Steam user, by its Steam ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_info_by_steam_id_get_with_http_info(steam_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str steam_id: Steam ID (64-bit) of the target user. (required)
        :param bool force_refresh: Don't use cached results, force refresh. Defaults to `false`.
        :return: UserInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['steam_id', 'force_refresh']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_info_by_steam_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'steam_id' is set
        if ('steam_id' not in params) or (params['steam_id'] is None):
            raise ValueError("Missing the required parameter `steam_id` when calling `user_info_by_steam_id_get`")


        collection_formats = {}

        resource_path = '/user/info_by_steam_id/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'steam_id' in params:
            query_params['steam_id'] = params['steam_id']
        if 'force_refresh' in params:
            query_params['force_refresh'] = params['force_refresh']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Token']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserInfo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_info_by_trade_url_get(self, trade_url, **kwargs):
        """
        Steam user info by trade URL
        Queries information about a Steam user, by its trade URL.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_info_by_trade_url_get(trade_url, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str trade_url: Trade URL of the target user. (required)
        :param bool force_refresh: Don't use cached results, force refresh. Defaults to `false`.
        :return: UserInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_info_by_trade_url_get_with_http_info(trade_url, **kwargs)
        else:
            (data) = self.user_info_by_trade_url_get_with_http_info(trade_url, **kwargs)
            return data

    def user_info_by_trade_url_get_with_http_info(self, trade_url, **kwargs):
        """
        Steam user info by trade URL
        Queries information about a Steam user, by its trade URL.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_info_by_trade_url_get_with_http_info(trade_url, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str trade_url: Trade URL of the target user. (required)
        :param bool force_refresh: Don't use cached results, force refresh. Defaults to `false`.
        :return: UserInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['trade_url', 'force_refresh']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_info_by_trade_url_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'trade_url' is set
        if ('trade_url' not in params) or (params['trade_url'] is None):
            raise ValueError("Missing the required parameter `trade_url` when calling `user_info_by_trade_url_get`")


        collection_formats = {}

        resource_path = '/user/info_by_trade_url/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'trade_url' in params:
            query_params['trade_url'] = params['trade_url']
        if 'force_refresh' in params:
            query_params['force_refresh'] = params['force_refresh']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Token']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserInfo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
