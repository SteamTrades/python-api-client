# coding: utf-8

"""
    SteamTrades API

    API Explorer for SteamTrades' RESTful API.

    OpenAPI spec version: 1.0
    Contact: devs@steamtrad.es
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Trade(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, status=None, message=None, initiation_time=None, completion_time=None, tradeoffer_url=None, denial_reason=None):
        """
        Trade - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'status': 'str',
            'message': 'str',
            'initiation_time': 'datetime',
            'completion_time': 'datetime',
            'tradeoffer_url': 'str',
            'denial_reason': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'status': 'status',
            'message': 'message',
            'initiation_time': 'initiation_time',
            'completion_time': 'completion_time',
            'tradeoffer_url': 'tradeoffer_url',
            'denial_reason': 'denial_reason'
        }

        self._id = id
        self._status = status
        self._message = message
        self._initiation_time = initiation_time
        self._completion_time = completion_time
        self._tradeoffer_url = tradeoffer_url
        self._denial_reason = denial_reason

    @property
    def id(self):
        """
        Gets the id of this Trade.
        Our internal ID uniquely identifying this trade

        :return: The id of this Trade.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Trade.
        Our internal ID uniquely identifying this trade

        :param id: The id of this Trade.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def status(self):
        """
        Gets the status of this Trade.

        :return: The status of this Trade.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Trade.

        :param status: The status of this Trade.
        :type: str
        """
        allowed_values = ["pending", "in_progress", "succeeded", "canceled", "failed", "declined", "timeout", "denied"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def message(self):
        """
        Gets the message of this Trade.
        Message sent with this trade.

        :return: The message of this Trade.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this Trade.
        Message sent with this trade.

        :param message: The message of this Trade.
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def initiation_time(self):
        """
        Gets the initiation_time of this Trade.
        Timestamp the trade was initiated

        :return: The initiation_time of this Trade.
        :rtype: datetime
        """
        return self._initiation_time

    @initiation_time.setter
    def initiation_time(self, initiation_time):
        """
        Sets the initiation_time of this Trade.
        Timestamp the trade was initiated

        :param initiation_time: The initiation_time of this Trade.
        :type: datetime
        """
        if initiation_time is None:
            raise ValueError("Invalid value for `initiation_time`, must not be `None`")

        self._initiation_time = initiation_time

    @property
    def completion_time(self):
        """
        Gets the completion_time of this Trade.
        Timestamp the trade was completed or blank if not yet completed 

        :return: The completion_time of this Trade.
        :rtype: datetime
        """
        return self._completion_time

    @completion_time.setter
    def completion_time(self, completion_time):
        """
        Sets the completion_time of this Trade.
        Timestamp the trade was completed or blank if not yet completed 

        :param completion_time: The completion_time of this Trade.
        :type: datetime
        """
        if completion_time is None:
            raise ValueError("Invalid value for `completion_time`, must not be `None`")

        self._completion_time = completion_time

    @property
    def tradeoffer_url(self):
        """
        Gets the tradeoffer_url of this Trade.
        The URL to the tradeoffer sent to the trade partner. Only set if the trade is in `in_progress` state, else absent. 

        :return: The tradeoffer_url of this Trade.
        :rtype: str
        """
        return self._tradeoffer_url

    @tradeoffer_url.setter
    def tradeoffer_url(self, tradeoffer_url):
        """
        Sets the tradeoffer_url of this Trade.
        The URL to the tradeoffer sent to the trade partner. Only set if the trade is in `in_progress` state, else absent. 

        :param tradeoffer_url: The tradeoffer_url of this Trade.
        :type: str
        """
        if tradeoffer_url is None:
            raise ValueError("Invalid value for `tradeoffer_url`, must not be `None`")

        self._tradeoffer_url = tradeoffer_url

    @property
    def denial_reason(self):
        """
        Gets the denial_reason of this Trade.
        If trade status is `denied`, the reason why the trade was denied, else absent. 

        :return: The denial_reason of this Trade.
        :rtype: str
        """
        return self._denial_reason

    @denial_reason.setter
    def denial_reason(self, denial_reason):
        """
        Sets the denial_reason of this Trade.
        If trade status is `denied`, the reason why the trade was denied, else absent. 

        :param denial_reason: The denial_reason of this Trade.
        :type: str
        """
        allowed_values = ["would_escrow", "private_inventory", "must_not_trade", "item_gone", "invalid_trade_url", "impossible_item_combination"]
        if denial_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `denial_reason` ({0}), must be one of {1}"
                .format(denial_reason, allowed_values)
            )

        self._denial_reason = denial_reason

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Trade):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
