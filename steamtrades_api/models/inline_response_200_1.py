# coding: utf-8

"""
    SteamTrades API

    API Explorer for SteamTrades' RESTful API.

    OpenAPI spec version: 1.0
    Contact: devs@steamtrad.es
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse2001(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, completed=None, failed=None):
        """
        InlineResponse2001 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'completed': 'bool',
            'failed': 'bool'
        }

        self.attribute_map = {
            'completed': 'completed',
            'failed': 'failed'
        }

        self._completed = completed
        self._failed = failed

    @property
    def completed(self):
        """
        Gets the completed of this InlineResponse2001.
        `true` if the scan is completed, else `false` 

        :return: The completed of this InlineResponse2001.
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """
        Sets the completed of this InlineResponse2001.
        `true` if the scan is completed, else `false` 

        :param completed: The completed of this InlineResponse2001.
        :type: bool
        """
        if completed is None:
            raise ValueError("Invalid value for `completed`, must not be `None`")

        self._completed = completed

    @property
    def failed(self):
        """
        Gets the failed of this InlineResponse2001.
        `true` if the scan failed, else `false`. Failure of inventory scans mostly happens due to private inventories. 

        :return: The failed of this InlineResponse2001.
        :rtype: bool
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """
        Sets the failed of this InlineResponse2001.
        `true` if the scan failed, else `false`. Failure of inventory scans mostly happens due to private inventories. 

        :param failed: The failed of this InlineResponse2001.
        :type: bool
        """
        if failed is None:
            raise ValueError("Invalid value for `failed`, must not be `None`")

        self._failed = failed

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2001):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
