# coding: utf-8

"""
    SteamTrades API

    API Explorer for SteamTrades' RESTful API.

    OpenAPI spec version: 1.0
    Contact: devs@steamtrad.es
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Game(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, steam_app_id=None, name=None, contexts=None):
        """
        Game - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'steam_app_id': 'str',
            'name': 'str',
            'contexts': 'list[InventoryContext]'
        }

        self.attribute_map = {
            'steam_app_id': 'steam_app_id',
            'name': 'name',
            'contexts': 'contexts'
        }

        self._steam_app_id = steam_app_id
        self._name = name
        self._contexts = contexts

    @property
    def steam_app_id(self):
        """
        Gets the steam_app_id of this Game.
        Steam application ID

        :return: The steam_app_id of this Game.
        :rtype: str
        """
        return self._steam_app_id

    @steam_app_id.setter
    def steam_app_id(self, steam_app_id):
        """
        Sets the steam_app_id of this Game.
        Steam application ID

        :param steam_app_id: The steam_app_id of this Game.
        :type: str
        """
        if steam_app_id is None:
            raise ValueError("Invalid value for `steam_app_id`, must not be `None`")

        self._steam_app_id = steam_app_id

    @property
    def name(self):
        """
        Gets the name of this Game.
        Name displayed in Steam client

        :return: The name of this Game.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Game.
        Name displayed in Steam client

        :param name: The name of this Game.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def contexts(self):
        """
        Gets the contexts of this Game.
        Supported inventory contexts for this game

        :return: The contexts of this Game.
        :rtype: list[InventoryContext]
        """
        return self._contexts

    @contexts.setter
    def contexts(self, contexts):
        """
        Sets the contexts of this Game.
        Supported inventory contexts for this game

        :param contexts: The contexts of this Game.
        :type: list[InventoryContext]
        """
        if contexts is None:
            raise ValueError("Invalid value for `contexts`, must not be `None`")

        self._contexts = contexts

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Game):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
