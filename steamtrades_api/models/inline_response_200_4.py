# coding: utf-8

"""
    SteamTrades API

    API Explorer for SteamTrades' RESTful API.

    OpenAPI spec version: 1.0
    Contact: devs@steamtrad.es
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse2004(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, trade_id=None, items_in_trade=None):
        """
        InlineResponse2004 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'trade_id': 'str',
            'items_in_trade': 'list[str]'
        }

        self.attribute_map = {
            'trade_id': 'trade_id',
            'items_in_trade': 'items_in_trade'
        }

        self._trade_id = trade_id
        self._items_in_trade = items_in_trade

    @property
    def trade_id(self):
        """
        Gets the trade_id of this InlineResponse2004.
        If `move_physically` was set and a \"physical\" trade was actually required to satisfy this request, the ID of this trade, else absent. 

        :return: The trade_id of this InlineResponse2004.
        :rtype: str
        """
        return self._trade_id

    @trade_id.setter
    def trade_id(self, trade_id):
        """
        Sets the trade_id of this InlineResponse2004.
        If `move_physically` was set and a \"physical\" trade was actually required to satisfy this request, the ID of this trade, else absent. 

        :param trade_id: The trade_id of this InlineResponse2004.
        :type: str
        """

        self._trade_id = trade_id

    @property
    def items_in_trade(self):
        """
        Gets the items_in_trade of this InlineResponse2004.
        The IDs of the items in the trade (not moved instantly) if a trade was created, else absent. 

        :return: The items_in_trade of this InlineResponse2004.
        :rtype: list[str]
        """
        return self._items_in_trade

    @items_in_trade.setter
    def items_in_trade(self, items_in_trade):
        """
        Sets the items_in_trade of this InlineResponse2004.
        The IDs of the items in the trade (not moved instantly) if a trade was created, else absent. 

        :param items_in_trade: The items_in_trade of this InlineResponse2004.
        :type: list[str]
        """

        self._items_in_trade = items_in_trade

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2004):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
