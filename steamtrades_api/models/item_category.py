# coding: utf-8

"""
    SteamTrades API

    API Explorer for SteamTrades' RESTful API.

    OpenAPI spec version: 1.0
    Contact: devs@steamtrad.es
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ItemCategory(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, preview_url=None, context=None, steam_market_hash=None, steam_name_color=None, steam_accent_color=None):
        """
        ItemCategory - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'preview_url': 'str',
            'context': 'str',
            'steam_market_hash': 'str',
            'steam_name_color': 'str',
            'steam_accent_color': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'preview_url': 'preview_url',
            'context': 'context',
            'steam_market_hash': 'steam_market_hash',
            'steam_name_color': 'steam_name_color',
            'steam_accent_color': 'steam_accent_color'
        }

        self._name = name
        self._preview_url = preview_url
        self._context = context
        self._steam_market_hash = steam_market_hash
        self._steam_name_color = steam_name_color
        self._steam_accent_color = steam_accent_color

    @property
    def name(self):
        """
        Gets the name of this ItemCategory.
        Category name

        :return: The name of this ItemCategory.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ItemCategory.
        Category name

        :param name: The name of this ItemCategory.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def preview_url(self):
        """
        Gets the preview_url of this ItemCategory.
        Preview URL for items of this kind (max. resolution)

        :return: The preview_url of this ItemCategory.
        :rtype: str
        """
        return self._preview_url

    @preview_url.setter
    def preview_url(self, preview_url):
        """
        Sets the preview_url of this ItemCategory.
        Preview URL for items of this kind (max. resolution)

        :param preview_url: The preview_url of this ItemCategory.
        :type: str
        """
        if preview_url is None:
            raise ValueError("Invalid value for `preview_url`, must not be `None`")

        self._preview_url = preview_url

    @property
    def context(self):
        """
        Gets the context of this ItemCategory.
        ID of the inventory context this item kind is associated with

        :return: The context of this ItemCategory.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """
        Sets the context of this ItemCategory.
        ID of the inventory context this item kind is associated with

        :param context: The context of this ItemCategory.
        :type: str
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")

        self._context = context

    @property
    def steam_market_hash(self):
        """
        Gets the steam_market_hash of this ItemCategory.
        Steam market hash

        :return: The steam_market_hash of this ItemCategory.
        :rtype: str
        """
        return self._steam_market_hash

    @steam_market_hash.setter
    def steam_market_hash(self, steam_market_hash):
        """
        Sets the steam_market_hash of this ItemCategory.
        Steam market hash

        :param steam_market_hash: The steam_market_hash of this ItemCategory.
        :type: str
        """
        if steam_market_hash is None:
            raise ValueError("Invalid value for `steam_market_hash`, must not be `None`")

        self._steam_market_hash = steam_market_hash

    @property
    def steam_name_color(self):
        """
        Gets the steam_name_color of this ItemCategory.
        Name color as defined by Steam

        :return: The steam_name_color of this ItemCategory.
        :rtype: str
        """
        return self._steam_name_color

    @steam_name_color.setter
    def steam_name_color(self, steam_name_color):
        """
        Sets the steam_name_color of this ItemCategory.
        Name color as defined by Steam

        :param steam_name_color: The steam_name_color of this ItemCategory.
        :type: str
        """
        if steam_name_color is None:
            raise ValueError("Invalid value for `steam_name_color`, must not be `None`")

        self._steam_name_color = steam_name_color

    @property
    def steam_accent_color(self):
        """
        Gets the steam_accent_color of this ItemCategory.
        Accent color (e.g. rarity color for CS:GO).

        :return: The steam_accent_color of this ItemCategory.
        :rtype: str
        """
        return self._steam_accent_color

    @steam_accent_color.setter
    def steam_accent_color(self, steam_accent_color):
        """
        Sets the steam_accent_color of this ItemCategory.
        Accent color (e.g. rarity color for CS:GO).

        :param steam_accent_color: The steam_accent_color of this ItemCategory.
        :type: str
        """
        if steam_accent_color is None:
            raise ValueError("Invalid value for `steam_accent_color`, must not be `None`")

        self._steam_accent_color = steam_accent_color

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ItemCategory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
