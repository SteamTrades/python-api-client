# coding: utf-8

"""
    SteamTrades API

    API Explorer for SteamTrades' RESTful API.

    OpenAPI spec version: 1.0
    Contact: devs@steamtrad.es
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ScannedItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, steam_asset_id=None, category=None, steam_class_id=None, steam_instance_id=None):
        """
        ScannedItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'steam_asset_id': 'str',
            'category': 'ItemCategory',
            'steam_class_id': 'str',
            'steam_instance_id': 'str'
        }

        self.attribute_map = {
            'steam_asset_id': 'steam_asset_id',
            'category': 'category',
            'steam_class_id': 'steam_class_id',
            'steam_instance_id': 'steam_instance_id'
        }

        self._steam_asset_id = steam_asset_id
        self._category = category
        self._steam_class_id = steam_class_id
        self._steam_instance_id = steam_instance_id

    @property
    def steam_asset_id(self):
        """
        Gets the steam_asset_id of this ScannedItem.
        Steam asset ID

        :return: The steam_asset_id of this ScannedItem.
        :rtype: str
        """
        return self._steam_asset_id

    @steam_asset_id.setter
    def steam_asset_id(self, steam_asset_id):
        """
        Sets the steam_asset_id of this ScannedItem.
        Steam asset ID

        :param steam_asset_id: The steam_asset_id of this ScannedItem.
        :type: str
        """
        if steam_asset_id is None:
            raise ValueError("Invalid value for `steam_asset_id`, must not be `None`")

        self._steam_asset_id = steam_asset_id

    @property
    def category(self):
        """
        Gets the category of this ScannedItem.
        Item category this item belongs to

        :return: The category of this ScannedItem.
        :rtype: ItemCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this ScannedItem.
        Item category this item belongs to

        :param category: The category of this ScannedItem.
        :type: ItemCategory
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def steam_class_id(self):
        """
        Gets the steam_class_id of this ScannedItem.
        Steam item class ID

        :return: The steam_class_id of this ScannedItem.
        :rtype: str
        """
        return self._steam_class_id

    @steam_class_id.setter
    def steam_class_id(self, steam_class_id):
        """
        Sets the steam_class_id of this ScannedItem.
        Steam item class ID

        :param steam_class_id: The steam_class_id of this ScannedItem.
        :type: str
        """
        if steam_class_id is None:
            raise ValueError("Invalid value for `steam_class_id`, must not be `None`")

        self._steam_class_id = steam_class_id

    @property
    def steam_instance_id(self):
        """
        Gets the steam_instance_id of this ScannedItem.
        Steam item instance ID

        :return: The steam_instance_id of this ScannedItem.
        :rtype: str
        """
        return self._steam_instance_id

    @steam_instance_id.setter
    def steam_instance_id(self, steam_instance_id):
        """
        Sets the steam_instance_id of this ScannedItem.
        Steam item instance ID

        :param steam_instance_id: The steam_instance_id of this ScannedItem.
        :type: str
        """
        if steam_instance_id is None:
            raise ValueError("Invalid value for `steam_instance_id`, must not be `None`")

        self._steam_instance_id = steam_instance_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ScannedItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
